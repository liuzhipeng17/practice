# 重写__str__: 控制打印行为， print 类对象
制定自己的类List.py可以看到

# 重写__repr__: 控制python 控制台实例化对象的显示

# 重写__iter__  希望对象是一个可迭代对象，能够利用循环for i in

# 重写__next__

# 重写__getitem__， __setitem__, __delitem__
    我们自己定义的类表现得和Python自带的list、tuple、dict

# __getattr__ 动态返回一个属性

    正常情况下，当我们调用类的方法或属性时，如果不存在，就会报错
    要避免这个错误，除了可以加上一个score属性外，Python还有另一个机制，
    那就是写一个__getattr__()方法，动态返回一个属性

# __setattr__, __delattr__还有其他的attr序列

# __call__  使得对象()能够执行，会触发__call__

# __slots__ 限制该class对象能添加的属性：应用场景：多个对象的属性是固定的

# __doc__  类里面的文档信息，该变量无法被继承

# __del__ 析构函数 当代码执行完或者del 对象（并不严谨，应该说该对象的引用计数为0）的时候，会触发

# 上下文管理协议with open('a.txt', 'r') as f：
    执行的流程：
    1） 执行open('a.txt', 'r')得到一个返回值，将返回值赋给f
    2)  执行：下面的子代码
    3)  执行完子代码后，自动关闭文件

    模拟自己的类实现上下文管理协议： __enter__ 和__exit__

