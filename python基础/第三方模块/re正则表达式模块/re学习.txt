# 正则表达式的核心： 字符串的模糊匹配
    它的设计思想是用一种描述性的语言来给字符串定义一个规则，
    凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。

# 元字符是正则表达式核心，元字符详情如下：

##1 . 通配符，匹配任意单个字符除换行外
            . 可以匹配\t

##2 重复的形式：重复前面的元字符
    * [0-无穷次)
    + [1-无穷次)
    ？ [0,1]次 "ab?c" 匹配ac, abc
    {}
        {n,m} 重复[n,m]次 a{3,5} 匹配 aaa, aaaa, aaaaa
        {n}   重复n次
        {n,}  重复>=n次

    重复的嵌套使用使用括号： (?:a{6})* ， 表示匹配 六个“a”字符的任意倍数。

    ?在贪婪匹配上的应用。 *， + ，？，{n}, {n,}, {m,n}都是贪婪匹配的，尽可能匹配多点。
    要想变成非贪婪匹配，用？
    <.*>匹配字符串<a> b <c>，会匹配整个字符串
    <.*？>就会仅仅匹配<a>
    {m,n}? 非贪婪匹配
     For example, on the 6-character string 'aaaaaa', a{3,5} will match 5 'a' characters, while a{3,5}? will only match 3 characters.

##3 [] 字符集，里面是多个字符或者单个字符，但取里面的一个字符
    ###a[bd]c 匹配abc adc
    ###除了"-" "^","\"外，字符集[]里面的"*,+.{}"都会失去元字符的意义，而是一个普通字符
        a[*]b 会匹配a*b
        [0-9]表示0-9任意的单个数字
        [^\d]过滤掉数字，取反
        [\-] -需要转义
        [^()] 表示非(，非）


##4 ^ 以什么开头
    ###^89

##5 $ 以什么结尾
    ###89$

##6 () 未命名分组：把括号里面的内容当成一个组（字符）
    ### （ad)+  重复ad 1到无穷次
    ### 优先级返回()匹配的内容，
    ### (?:ad) 不优先返回()匹配的内容

##7 | 或：管道符
    "www\.(oldboy|baidu)\.com"

##8 \ 转义字符
    ### \d 代表0-9
    ### \D 非十进制数
    ### \w 代表任意数字或字母[a-zA-Z0-9_]
    ### \W \w取反 [^a-zA-Z0-9_]
    ### \s 空格
    ### \S  \s取反
    ### \b 匹配特殊字符（空格,$等）的边界(匹配单词开头和结尾的空字符串）
        "\bI\b" 和"\s+I\s+"不一样的
         \bI\b会把i匹配
         "\s+I\s+" 会把空格也匹配到的

        在python，单词是由字母或者下划线_组成，单词的结尾：空格，非数字，非下划线

    ### \. 表示.字符
    ### \* 表示*字符


##9 匹配整数或实数
        -?\d+\.?\d* 负数也匹配在内

##10 r的使用
记得：python解析器，re模块都会对规则里面的字符串进行转义
添加r是过滤掉Python解析器转义


# re的方法
re.findall 把所有结果返回列表
re.finditer 返回的是一个迭代器

# re.search() 返回的是匹配结果对象（match object)
# 只匹配第一个结果（匹配成功后，就不会继续了）
# match group()方法拿到匹配结果

# re.match() # 只在字符串开始位置匹配
ret = re.match("\d+","djg343ddd") 匹配失败
ret = re.match("\d+", "444djjg") 匹配成功
#

# re.split('\d+', 'fhd3245skf54skf453sd')

# re.sub('\d+', 'A', 'HELLO 111DDD52D')
# 将数字部分，替换成A
# re.sub('\d+', 'A', 'HELLO 111DDD52D',1)
# 只替换第一次匹配的地方

# re.compile 编译规则，
ret = re.compile('\d+')
ret.findall('hello3334')

# ()未命名分组

# （?P<name>pattern) 命名分组
re.findall(r'(\w+)\.articles\.(?P<ID>\d+)','yuan.articles.1234.html')

# 贪婪匹配
print re.findall(r'\d+', 'adbd1255454adfd')
# 1 已经满足匹配，但是贪婪匹配125545，按最长匹配
# 非贪婪匹配
print re.findall(r'\d+？', 'adbd1255454adfd')
# 非贪婪匹配，就是匹配到1就返回一个结果，
#  继续匹配2，返回一个结果，继续匹配5，返回一个结果