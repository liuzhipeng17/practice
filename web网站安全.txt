# web网站攻击
	- sql注入攻击
	
	- xss 攻击（cross site script) 跨站脚本攻击
	
	- csrf攻击 cross site request forgery 跨站请求伪造
	
# sql 注入攻击

	- 定义：通过提交的参数（或者表单）里面提交了sql脚本， 主要是'or 1=1#, '-- 这两种方式， 实现登录；从而盗取后台数据，修改数据等。
	
			-- 原因主要是：后台没有对提交的数据进行验证。（比如判断参数是否包含单引号' ）
	
	
	- 原理：
			比如用户登录提交了username, 和password, 如果后台是这样写的:
			利用Pymysql来实现：
				conn = pymssql.connect(host=host,user=user,password=pwd,database=db,charset="utf8")
				cur = conn.cursor()
				sql = "select * from users where username={0} and password={1}".format(username, password)
				cur.excute(sql)
				
				result_list = cur.fetchall()
				
			
			# 如果username输入的参数为 'or 1=1#  则sql语句就会变成 select * from users where username="" or 1=1 后面的不用管了，这个条件肯定成立
			
			
			
	- 防护：
		-- 对提交的数据进行检查判断，是否含有'
		
		-- 利用django的orm，因为orm已经对这些'等sql脚本，进行了encoding成其他特殊字符
	
	
# xss攻击
	- 定义：通过用户提交get请求的参数， 添加js脚本，然后盗取用户的cookie； 之后利用cookie伪造用户，访问银行等网站。盗取用户信息
	
	- 原理：
			用户点击了黑客发送给它的一个短信，一个邮箱信息。 这些信息是以用户信任的网站命名的（如中国银行）， 而且点击这个连接后会跳转：
			htttp://bank/?name=<sript>c = document.Cookie(); 发送cookie到黑客网站脚本  </script> 
			
			用户误认为是信任网站，就会点击后登陆， 可以看到登陆后脚本会获取cookie,然后将cookie发送给了黑客。 黑客获取到cookie就会伪装成
			用户直接登陆银行了
			
	
	- 防护：
	
			-- 银行网站对提交的参数进行过滤， 如果包含<>这些特殊字符，将其encoding成特殊字符，或者不让其访问
			
			-- 利用post提交数据，而不用get
			
			-- 返回给cookie只是一些简单信息， 不要将密码邮箱等信息返回给cookie
	
	
	- 备注：
			xss可以看到黑客是直接拿到了用户的cookie,下面的csrf则是黑客不要你的cookie,是你自己用cookie登录帮黑客干坏事。
# csrf攻击

	- 定义: 用户登录了信任网站A，在其未登出的情况下。黑客网站B伪造了访问信任网站A的请求； 然后用户访问了黑客网站B(很多方式，图片点击等)，
			由于用户未登出A网站，浏览器还带着session_id， 然后用户又在自己的浏览器发出了伪造请求， A网站接收到伪造请求，根据session_id认为是用户发过来的。
			会认为是安全的。 
			
	- 原理:
			主要是浏览器没有对发送过来的请求进行验证。认为发过来的请求都是安全的。 
			
	- 防御：
			- 服务器在你访问页面的时候（提交数据之前，渲染表单） ，就会返回一个token(随机的而且是有效期的），
			  用户在提交数据时，会将这个token一起带过来。
			  

			
			
			